// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package card

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardClient is the client API for Card service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardClient interface {
	Create(ctx context.Context, in *CardCreateRequest, opts ...grpc.CallOption) (*CardCreateReply, error)
	GetByID(ctx context.Context, in *CardGetByIDRequest, opts ...grpc.CallOption) (*CardGetByIDReply, error)
	UpdateByID(ctx context.Context, in *CardUpdateByIDRequest, opts ...grpc.CallOption) (*CardUpdateByIDReply, error)
	GetAll(ctx context.Context, in *CardGetAllRequest, opts ...grpc.CallOption) (*CardGetAllReply, error)
	GetByBankID(ctx context.Context, in *CardGetByBankIDRequest, opts ...grpc.CallOption) (*CardGetByBankIDReply, error)
}

type cardClient struct {
	cc grpc.ClientConnInterface
}

func NewCardClient(cc grpc.ClientConnInterface) CardClient {
	return &cardClient{cc}
}

func (c *cardClient) Create(ctx context.Context, in *CardCreateRequest, opts ...grpc.CallOption) (*CardCreateReply, error) {
	out := new(CardCreateReply)
	err := c.cc.Invoke(ctx, "/card.Card/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetByID(ctx context.Context, in *CardGetByIDRequest, opts ...grpc.CallOption) (*CardGetByIDReply, error) {
	out := new(CardGetByIDReply)
	err := c.cc.Invoke(ctx, "/card.Card/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) UpdateByID(ctx context.Context, in *CardUpdateByIDRequest, opts ...grpc.CallOption) (*CardUpdateByIDReply, error) {
	out := new(CardUpdateByIDReply)
	err := c.cc.Invoke(ctx, "/card.Card/UpdateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetAll(ctx context.Context, in *CardGetAllRequest, opts ...grpc.CallOption) (*CardGetAllReply, error) {
	out := new(CardGetAllReply)
	err := c.cc.Invoke(ctx, "/card.Card/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetByBankID(ctx context.Context, in *CardGetByBankIDRequest, opts ...grpc.CallOption) (*CardGetByBankIDReply, error) {
	out := new(CardGetByBankIDReply)
	err := c.cc.Invoke(ctx, "/card.Card/GetByBankID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServer is the server API for Card service.
// All implementations must embed UnimplementedCardServer
// for forward compatibility
type CardServer interface {
	Create(context.Context, *CardCreateRequest) (*CardCreateReply, error)
	GetByID(context.Context, *CardGetByIDRequest) (*CardGetByIDReply, error)
	UpdateByID(context.Context, *CardUpdateByIDRequest) (*CardUpdateByIDReply, error)
	GetAll(context.Context, *CardGetAllRequest) (*CardGetAllReply, error)
	GetByBankID(context.Context, *CardGetByBankIDRequest) (*CardGetByBankIDReply, error)
	mustEmbedUnimplementedCardServer()
}

// UnimplementedCardServer must be embedded to have forward compatible implementations.
type UnimplementedCardServer struct {
}

func (UnimplementedCardServer) Create(context.Context, *CardCreateRequest) (*CardCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardServer) GetByID(context.Context, *CardGetByIDRequest) (*CardGetByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedCardServer) UpdateByID(context.Context, *CardUpdateByIDRequest) (*CardUpdateByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedCardServer) GetAll(context.Context, *CardGetAllRequest) (*CardGetAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCardServer) GetByBankID(context.Context, *CardGetByBankIDRequest) (*CardGetByBankIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByBankID not implemented")
}
func (UnimplementedCardServer) mustEmbedUnimplementedCardServer() {}

// UnsafeCardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServer will
// result in compilation errors.
type UnsafeCardServer interface {
	mustEmbedUnimplementedCardServer()
}

func RegisterCardServer(s grpc.ServiceRegistrar, srv CardServer) {
	s.RegisterService(&Card_ServiceDesc, srv)
}

func _Card_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).Create(ctx, req.(*CardCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetByID(ctx, req.(*CardGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardUpdateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/UpdateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).UpdateByID(ctx, req.(*CardUpdateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetAll(ctx, req.(*CardGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetByBankID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardGetByBankIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetByBankID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetByBankID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetByBankID(ctx, req.(*CardGetByBankIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Card_ServiceDesc is the grpc.ServiceDesc for Card service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Card_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card.Card",
	HandlerType: (*CardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Card_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Card_GetByID_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _Card_UpdateByID_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Card_GetAll_Handler,
		},
		{
			MethodName: "GetByBankID",
			Handler:    _Card_GetByBankID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card.proto",
}
