// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reward

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RewardClient is the client API for Reward service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardClient interface {
	Create(ctx context.Context, in *RewardCreateRequest, opts ...grpc.CallOption) (*RewardCreateReply, error)
	GetByID(ctx context.Context, in *RewardGetByIDRequest, opts ...grpc.CallOption) (*RewardGetByIDReply, error)
	UpdateByID(ctx context.Context, in *RewardUpdateByIDRequest, opts ...grpc.CallOption) (*RewardUpdateByIDReply, error)
	GetByCardID(ctx context.Context, in *RewardGetByCardIDRequest, opts ...grpc.CallOption) (*RewardGetByCardIDReply, error)
}

type rewardClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardClient(cc grpc.ClientConnInterface) RewardClient {
	return &rewardClient{cc}
}

func (c *rewardClient) Create(ctx context.Context, in *RewardCreateRequest, opts ...grpc.CallOption) (*RewardCreateReply, error) {
	out := new(RewardCreateReply)
	err := c.cc.Invoke(ctx, "/reward.Reward/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardClient) GetByID(ctx context.Context, in *RewardGetByIDRequest, opts ...grpc.CallOption) (*RewardGetByIDReply, error) {
	out := new(RewardGetByIDReply)
	err := c.cc.Invoke(ctx, "/reward.Reward/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardClient) UpdateByID(ctx context.Context, in *RewardUpdateByIDRequest, opts ...grpc.CallOption) (*RewardUpdateByIDReply, error) {
	out := new(RewardUpdateByIDReply)
	err := c.cc.Invoke(ctx, "/reward.Reward/UpdateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardClient) GetByCardID(ctx context.Context, in *RewardGetByCardIDRequest, opts ...grpc.CallOption) (*RewardGetByCardIDReply, error) {
	out := new(RewardGetByCardIDReply)
	err := c.cc.Invoke(ctx, "/reward.Reward/GetByCardID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardServer is the server API for Reward service.
// All implementations must embed UnimplementedRewardServer
// for forward compatibility
type RewardServer interface {
	Create(context.Context, *RewardCreateRequest) (*RewardCreateReply, error)
	GetByID(context.Context, *RewardGetByIDRequest) (*RewardGetByIDReply, error)
	UpdateByID(context.Context, *RewardUpdateByIDRequest) (*RewardUpdateByIDReply, error)
	GetByCardID(context.Context, *RewardGetByCardIDRequest) (*RewardGetByCardIDReply, error)
	mustEmbedUnimplementedRewardServer()
}

// UnimplementedRewardServer must be embedded to have forward compatible implementations.
type UnimplementedRewardServer struct {
}

func (UnimplementedRewardServer) Create(context.Context, *RewardCreateRequest) (*RewardCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRewardServer) GetByID(context.Context, *RewardGetByIDRequest) (*RewardGetByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedRewardServer) UpdateByID(context.Context, *RewardUpdateByIDRequest) (*RewardUpdateByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedRewardServer) GetByCardID(context.Context, *RewardGetByCardIDRequest) (*RewardGetByCardIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCardID not implemented")
}
func (UnimplementedRewardServer) mustEmbedUnimplementedRewardServer() {}

// UnsafeRewardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardServer will
// result in compilation errors.
type UnsafeRewardServer interface {
	mustEmbedUnimplementedRewardServer()
}

func RegisterRewardServer(s grpc.ServiceRegistrar, srv RewardServer) {
	s.RegisterService(&Reward_ServiceDesc, srv)
}

func _Reward_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reward.Reward/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServer).Create(ctx, req.(*RewardCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reward_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reward.Reward/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServer).GetByID(ctx, req.(*RewardGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reward_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardUpdateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reward.Reward/UpdateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServer).UpdateByID(ctx, req.(*RewardUpdateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reward_GetByCardID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardGetByCardIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServer).GetByCardID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reward.Reward/GetByCardID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServer).GetByCardID(ctx, req.(*RewardGetByCardIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reward_ServiceDesc is the grpc.ServiceDesc for Reward service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reward_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reward.Reward",
	HandlerType: (*RewardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Reward_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Reward_GetByID_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _Reward_UpdateByID_Handler,
		},
		{
			MethodName: "GetByCardID",
			Handler:    _Reward_GetByCardID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reward.proto",
}
